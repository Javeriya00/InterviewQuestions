AWS DevOps Interview Questions and Answers

1. What AWS services have you worked with?

I have worked with a variety of AWS services across different areas of cloud infrastructure, including compute, networking, storage, and security. Below are some of the key AWS services I've worked with:

Compute

EC2 (Elastic Compute Cloud): Provision and manage virtual machines for various workloads.

ECS (Elastic Container Service): Deployed Docker containers for managing microservices.

EKS (Elastic Kubernetes Service): Managed Kubernetes clusters using Helm and Terraform.

Lambda: Implemented serverless architecture for event-driven workflows.

Storage

S3 (Simple Storage Service): Storing backups, logs, and static files, integrated with CloudFront.

EBS (Elastic Block Store): Mounted as persistent storage for EC2 instances.

EFS (Elastic File System): Used for shared file storage between multiple EC2 instances.

Networking

VPC (Virtual Private Cloud): Designed network configurations, including subnets and security groups.

ELB (Elastic Load Balancer): Configured and managed load balancing for scaling applications.

Route 53: Managed DNS, integrated with CloudFront for low-latency content delivery.

Security

IAM (Identity and Access Management): Implemented least-privilege policies and IAM roles.

Secrets Manager: Stored API keys and database credentials securely.

GuardDuty: Enabled threat detection for AWS resources.

KMS (Key Management Service): Used for encrypting data at rest.

2. Explain the difference between EBS and S3.

Feature

EBS (Elastic Block Store)

S3 (Simple Storage Service)

Storage Type

Block storage

Object storage

Use Case

Persistent storage for EC2 instances

Large, unstructured data storage

Access

Mounted to EC2 instances

Accessible via HTTP/HTTPS API

Performance

Low-latency, high-throughput

Scalable but not low-latency

Durability

99.999%

99.999999999%

Backup

Snapshots of volumes

Versioning and replication

Pricing

Based on storage and IOPS

Based on storage and requests

Experience: Used EBS SSD-backed volumes for database performance and S3 for backups and static content.

3. How do you provision an EC2 instance using Terraform?

Steps:

Define Provider Configuration

provider "aws" {
  region = "us-east-1"
}

Define the EC2 Instance Resource

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  tags = {
    Name = "MyTerraformInstance"
  }
}

Define Security Group

resource "aws_security_group" "example" {
  name        = "my-security-group"
  description = "Allow SSH inbound traffic"
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

Initialize and Apply Configuration

terraform init
terraform plan
terraform apply

Destroy Instance (Optional)

terraform destroy

4. What is an EKS cluster, and how does it differ from ECS?

Feature

EKS (Elastic Kubernetes Service)

ECS (Elastic Container Service)

Orchestration

Kubernetes

AWS-native container orchestrator

Workload Type

Microservices, complex workloads

Simple containerized apps

Networking

Requires VPC, plugins, service discovery

Uses AWS networking

Scaling

Managed Kubernetes scaling

Uses AWS Fargate

Pricing

Charged for control plane and worker nodes

Free, but pay for EC2/Fargate

Experience: Deployed Kubernetes-based applications on EKS using Terraform and Helm; used ECS with Fargate for simple workloads.

5. How do you configure auto-scaling for an EC2 instance?

Steps:

Create a Launch Template specifying the AMI, instance type, key pair, and security groups.

Create an Auto Scaling Group (ASG) and associate it with the Launch Template.

Define Scaling Policies:

Target tracking (scale based on CPU/memory).

Step scaling (predefined thresholds).

Scheduled scaling (scale at specific times).

Attach an ELB (Optional) to distribute traffic.

Monitor via CloudWatch and fine-tune policies.

6. How do you secure an S3 bucket?

Best Practices:

Block Public Access: Prevent unauthorized access.

IAM Policies: Restrict access to specific users.

Bucket Policies: Define rules for access.

Enable Server-Side Encryption (SSE-S3, SSE-KMS, SSE-C).

Enable MFA Delete: Require multi-factor authentication for object deletion.

Enable Logging: Monitor bucket access logs.

Use AWS WAF: Protect against malicious access.

Set Lifecycle Policies: Automate data retention and archival.

7. What are IAM roles, and how do you assign them?

IAM roles grant temporary permissions to AWS services or users without requiring long-term credentials.

Assigning IAM Roles:

Define a Trusted Entity (AWS service, user, or external account).

Attach Policies to specify permissions.

Assign the Role:

Attach to EC2, Lambda, or other services.

Assume role via AWS CLI or Console.

Use AWS STS (Security Token Service) for temporary access.

8. What is an ALB, and how does it differ from an NLB?

Feature

ALB (Application Load Balancer)

NLB (Network Load Balancer)

Protocol

HTTP/HTTPS

TCP, UDP, TLS

Layer

Layer 7 (Application Layer)

Layer 4 (Transport Layer)

Routing

Path-based, Host-based

Direct IP-based

Performance

Higher latency

Ultra-low latency

Use Case

Web apps, microservices

Real-time apps, low-latency traffic

9. How do you set up a CI/CD pipeline to deploy infrastructure using Terraform on AWS?

Store Terraform Code in Git.

Define a GitLab CI/CD Pipeline (.gitlab-ci.yml).

Use Terraform Backend (S3 + DynamoDB) for state management.

Authenticate AWS Access using IAM roles or env variables.

Pipeline Stages:

terraform init

terraform plan

terraform apply

Use GitLab Runners or AWS CodeBuild to execute jobs.

This document provides a structured approach to AWS DevOps interview preparation, covering auto-scaling, security, IAM, load balancing, Terraform CI/CD, and AWS DevOps tools.

