# AWS DevOps Interview Questions and Answers

## What AWS services have you worked with?
I have worked with a variety of AWS services across different areas of cloud infrastructure, including compute, networking, storage, and security. Below are some of the key AWS services I've worked with:

### Compute
- **EC2 (Elastic Compute Cloud)**: Used for provisioning and managing virtual machines for various workloads.
- **ECS (Elastic Container Service)**: Deployed Docker containers on ECS for managing microservices in production.
- **EKS (Elastic Kubernetes Service)**: Managed Kubernetes clusters on AWS for deploying containerized applications using Helm and Terraform.
- **Lambda**: Implemented serverless architecture for event-driven workflows, handling tasks like notifications and data processing.

### Storage
- **S3 (Simple Storage Service)**: Used for storing backups, logs, and static files. Integrated with CloudFront for content delivery.
- **EBS (Elastic Block Store)**: Mounted as persistent storage for EC2 instances.
- **EFS (Elastic File System)**: Used for shared file storage between multiple EC2 instances.

### Networking
- **VPC (Virtual Private Cloud)**: Designed and managed network configurations, including subnets, security groups, and route tables.
- **ELB (Elastic Load Balancer)**: Configured and managed load balancing for scaling web applications.
- **Route 53**: Managed DNS for mapping domain names to IP addresses, integrated with CloudFront for low-latency content delivery.

### Security
- **IAM (Identity and Access Management)**: Managed user access and permissions, implemented least-privilege policies, and used IAM roles for secure service-to-service communication.
- **Secrets Manager**: Stored and managed secrets (e.g., API keys, database credentials) securely for applications.
- **GuardDuty**: Enabled threat detection and monitoring for suspicious activities across AWS resources.
- **KMS (Key Management Service)**: Used for encrypting data at rest, including S3, EBS volumes, and RDS instances.

### Databases
- **RDS (Relational Database Service)**: Managed SQL-based databases (e.g., MySQL, PostgreSQL) for backend services.
- **DynamoDB**: Implemented NoSQL databases for high-availability applications with scalable throughput.
- **Aurora**: Used for highly available, fault-tolerant relational databases with low-latency queries.

### Monitoring and Logging
- **CloudWatch**: Set up custom CloudWatch metrics, logs, and alarms for monitoring infrastructure health and application performance.
- **CloudTrail**: Used for auditing AWS API activity to track user actions and changes to infrastructure.
- **X-Ray**: Implemented for tracing and analyzing requests in microservices-based applications.

### Automation and Infrastructure as Code (IaC)
- **CloudFormation**: Used for managing infrastructure deployments in a declarative manner.
- **AWS CLI**: Automated tasks and resource management through the AWS command-line interface.
- **Terraform**: Managed AWS infrastructure using Terraform, including EC2, S3, VPC, EKS, and IAM resources.

### CI/CD and DevOps
- **CodePipeline**: Automated deployment pipelines for applications using integration with CodeBuild and CodeDeploy.
- **CodeDeploy**: Managed deployments to EC2 instances and Lambda functions.
- **CodeCommit**: Used as a source code repository in conjunction with CodePipeline.

---

## Explain the difference between EBS and S3.

| Feature           | EBS (Elastic Block Store) | S3 (Simple Storage Service) |
|------------------|-------------------------|-----------------------------|
| **Storage Type** | Block storage (raw disk volumes) | Object storage (files in buckets) |
| **Use Case** | Persistent storage for EC2 instances (e.g., OS, databases) | Large, unstructured data storage (e.g., backups, media) |
| **Access** | Mounted to EC2 instances | Accessible via HTTP/HTTPS API |
| **Performance** | Low-latency, high-throughput | Scalable, but not low-latency |
| **Scalability** | Scalable, but tied to EC2 instance | Virtually unlimited scalability |
| **Durability** | 99.999% durability | 99.999999999% durability |
| **Backup** | Snapshots of volumes | Versioning and replication |
| **Pricing** | Based on storage and IOPS | Based on storage and requests |

**My Experience with EBS and S3:**
I’ve worked with EBS volumes for running databases and applications on EC2 instances, where low-latency storage was required. For example, I used EBS SSD-backed volumes for an application database to ensure fast read/write performance. On the other hand, I’ve used S3 for storing logs, backups, and static content for websites, utilizing versioning to track object changes and lifecycle policies to transition data to lower-cost storage tiers like Glacier for long-term archiving.

---

## How do you provision an EC2 instance using Terraform?
### Steps to provision an EC2 instance using Terraform:
1. **Define Provider Configuration**
```hcl
provider "aws" {
  region = "us-east-1"
}
```

2. **Define the EC2 Instance Resource**
```hcl
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"  # Replace with your desired AMI ID
  instance_type = "t2.micro"

  tags = {
    Name = "MyTerraformInstance"
  }
}
```

3. **Define Security Group**
```hcl
resource "aws_security_group" "example" {
  name        = "my-security-group"
  description = "Allow SSH inbound traffic"
  
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
```

4. **Initialize Terraform and Apply Configuration**
```sh
terraform init
terraform plan
terraform apply
```

5. **Destroy the EC2 Instance (Optional)**
```sh
terraform destroy
```

---

## What is an EKS cluster, and how does it differ from ECS?
**Amazon EKS (Elastic Kubernetes Service) vs. Amazon ECS (Elastic Container Service)**

| Feature         | EKS (Elastic Kubernetes Service) | ECS (Elastic Container Service) |
|---------------|---------------------------------|-----------------------------|
| **Orchestration Engine** | Kubernetes | AWS-native container orchestrator |
| **Workload Type** | Suitable for microservices and complex workloads | Ideal for simpler containerized applications |
| **Networking** | Requires VPC, networking plugins, and Kubernetes service discovery | Uses AWS networking with built-in integration |
| **Scaling** | Managed Kubernetes scaling | Uses AWS Fargate for serverless scaling |
| **Pricing** | Charged for EKS control plane and worker nodes | Free, but you pay for EC2 or Fargate resources |

**My Experience with EKS and ECS:**
I’ve worked extensively with EKS for deploying Kubernetes-based applications, using Terraform to provision clusters and Helm for application management. I’ve also used ECS for simpler container workloads, where Fargate eliminates the need for server management.

**AWS DevOps Interview Questions and Answers**

**1. How do you configure auto-scaling for an EC2 instance?**

Auto Scaling in AWS is configured using an Auto Scaling Group (ASG) and a Launch Template or Launch Configuration.
- **Step 1**: Create a Launch Template or Launch Configuration specifying the AMI, instance type, key pair, and security groups.
- **Step 2**: Create an Auto Scaling Group (ASG) and associate it with the Launch Template.
- **Step 3**: Define scaling policies:
  - Target tracking (scale based on CPU, memory, or custom metrics)
  - Step scaling (based on predefined thresholds)
  - Scheduled scaling (scale at specific times)
- **Step 4**: Attach an Elastic Load Balancer (optional) to distribute traffic.
- **Step 5**: Monitor ASG using CloudWatch and fine-tune policies accordingly.

---

**2. How do you secure an S3 bucket?**

To secure an S3 bucket, implement the following best practices:
- **Block Public Access**: Use S3 settings to block all public access.
- **IAM Policies**: Define least privilege IAM policies to control access.
- **Bucket Policies**: Restrict access to specific AWS accounts or IP ranges.
- **Enable Server-Side Encryption**: Use SSE-S3, SSE-KMS, or SSE-C to encrypt data at rest.
- **Enable MFA Delete**: Require multi-factor authentication for object deletion.
- **Use Access Logs**: Enable S3 logging to track access.
- **Enable AWS WAF**: Protect against malicious access attempts.
- **Set Lifecycle Policies**: Automate data retention and deletion.

---

**3. What are IAM roles, and how do you assign them?**

IAM roles are used to grant temporary permissions to AWS services or users without requiring long-term credentials.
- **Creating an IAM Role**:
  - Define the **trusted entity** (AWS service, user, or external account).
  - Attach a **policy** to define permissions.
  - Optionally, attach **permissions boundaries** to restrict privileges.
- **Assigning IAM Roles**:
  - Attach the role to an EC2 instance, Lambda function, or other AWS services.
  - Use AWS CLI or Console to assume the role and gain temporary access.
  - Leverage AWS STS (Security Token Service) for temporary credentials.

---

**4. What is an ALB, and how does it differ from an NLB?**

**Application Load Balancer (ALB)** vs. **Network Load Balancer (NLB)**:
| Feature | ALB | NLB |
|---------|-----|-----|
| Protocol | HTTP/HTTPS | TCP, UDP, TLS |
| Layer | Layer 7 (Application Layer) | Layer 4 (Transport Layer) |
| Routing | Path-based, Host-based | Direct IP-based |
| Performance | Slightly higher latency | Ultra-low latency |
| Sticky Sessions | Supported | Not supported (without extra config) |
| SSL Termination | Supported | Requires TLS listeners |
| Use Case | Web applications, Microservices | Low-latency, real-time applications |

---

**5. How do you set up a CI/CD pipeline to deploy infrastructure using Terraform on AWS?**

1. **Setup Git Repository**:
   - Store Terraform code in a Git repository (GitHub, GitLab, Bitbucket).
2. **Create a GitLab CI/CD Pipeline** (if using GitLab):
   - Define a `.gitlab-ci.yml` file with stages for `plan`, `apply`, and `destroy`.
3. **Use Terraform Cloud/Backend**:
   - Configure AWS S3 as a backend for state management.
   - Enable AWS DynamoDB for state locking.
4. **Configure AWS Credentials**:
   - Use environment variables or IAM roles to authenticate.
5. **Define Pipeline Stages**:
   - `terraform init` – Initializes Terraform.
   - `terraform plan` – Generates an execution plan.
   - `terraform apply` – Deploys infrastructure upon approval.
6. **Use GitLab Runners or AWS CodeBuild**:
   - Execute Terraform jobs on a managed CI/CD runner.

---

**6. Explain the role of AWS CodeBuild, CodePipeline, and how they compare with GitLab CI/CD.**

| Feature | AWS CodeBuild | AWS CodePipeline | GitLab CI/CD |
|---------|--------------|----------------|--------------|
| Purpose | Build automation | Full CI/CD orchestration | Full CI/CD automation |
| Execution | Runs build commands | Automates stages | Runs jobs in `.gitlab-ci.yml` |
| Integration | Works with CodePipeline, S3, ECR | Works with CodeCommit, S3, ECS | Integrates with AWS, Kubernetes, Docker |
| Cost | Pay-per-use | Pay-per-use | Self-hosted or SaaS |
| Customization | Supports buildspec.yml | Fully managed pipelines | Highly customizable pipelines |
| Use Case | Compile, test, and package code | End-to-end deployment workflows | CI/CD automation with flexibility |

---

This document serves as a guide for AWS DevOps interview preparation, covering core topics in auto-scaling, security, IAM, load balancing, Terraform CI/CD, and AWS DevOps tools.
